// Define color maps for Slack Integration
def COLOR_MAP = ['SUCCESS': 'good', 'FAILURE': 'danger', 'UNSTABLE': 'danger', 'ABORTED': 'danger']


def remote = [:]
    remote.name = 'tqs'
    remote.host = '13.94.238.109'
    remote.user = 'tqs'
    remote.password = 'TqsDeployment2019.'
    remote.allowAnyHosts = true
    
    
pipeline {
    agent any
    tools {
        jdk 'jdk8'
        maven 'mvn'
    }
    stages { 
        stage('Remote SSH') {
            steps {
              sh '''
                  cd SpringBootOnDocker
                  mvn package
                 '''
              sshPut remote: remote, from: 'SpringBootOnDocker/target/cloudplaces-v1.0.jar', into: '.'
              shCommand remote: remote, command: "java -jar cloudplaces-v1.0.jar"
            }
        }
        
        stage('Deploy') {
            steps {
                input 'Do you approve the deployment?'
                // copy the application
                sh '''
                    cd /home
                    mkdir xxx
                    '''
            }
        }
    
        stage('Teixeira - Integration Testing With Spring ') {
            steps {
                // Maven Install
                sh '''
		            cd hm1/
		            mvn -U clean test 
		        '''
            }
        }
        
        stage('Install') {
            steps {
                //Send message to Slack informing that the Build is Starting
                slackSend (message: "*Build Started* - ${env.JOB_NAME} *#${env.BUILD_NUMBER}* (<${env.BUILD_URL}|Open Build Logs>)")
                
                //Create a display to emulate a GUI
                sh '''
                    Xvfb :99 -ac &
                    export DISPLAY=:99 
                '''
                
                // Maven Install
                sh '''
		            cd tqs-euromillions-unit/
		            mvn -U clean test cobertura:cobertura -Dcobertura.report.format=xml
		        '''
            }
            post {
                always {
                    junit '**/target/*-reports/TEST-*.xml'
                        step([$class: 'CoberturaPublisher', coberturaReportFile: 'tqs-euromillions-unit/target/site/cobertura/coverage.xml'])

                }
            }
        }
        
        
	    stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('mySonar') {
                    // Optionally use a Maven environment you've configured already
                    withMaven(maven:'mvn') {
                        sh '''
			                cd tqs-euromillions-unit/
			                mvn clean package sonar:sonar
			            '''
                    }
                }
            }
        }
	    stage("SonarQube Quality Gate") {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
                    // true = set pipeline to UNSTABLE, false = don't
                    // Requires SonarQube Scanner for Jenkins 2.7+
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }
    post {
        always {
                slackSend (color: COLOR_MAP[currentBuild.currentResult], message: "Job: *${env.JOB_NAME}, build #${env.BUILD_NUMBER}* is *`${currentBuild.currentResult}`* \nRun in ${currentBuild.durationString} - <${env.BUILD_URL}|Open Build Logs>")
            }
        }
}

